协同程序与线程差不多，也就是一条执行序列，拥有自己独立的栈、局部变量和指令指针，同时又与其它协同程序共享全局变量和其它大部分东西。从概念上讲，线程与协同程序的主要区别在于，一个具有多个线程的程序可以同时运行几个线程，而协同程序却需要彼此协作的运行。就是说，一个具有多个协同程序的程序在任意时刻只能运行一个协同程序，并且正在运行的协同程序只会在其显式地要求挂起时，它的执行才会暂停

Lua将所有关于协同程序的函数放置在一个名为“coroutine”的table中。函数create用于创建新的协同程序，它只有一个参数，就是一个函数。该函数的代码就是协同程序需要执行的内容。create会返回一个thread类型的值，用以表示新的协同程序，一般create的参数是一个匿名函数，例如以下代码：
local co = coroutine.create(function () print("Hello World") end)

一个协同程序可以有四种不同的状态：挂起（suspended）、运行（running）、死亡（dead）和正常（normal）。当新创建一个协同程序时，它处于挂起状态，言外之意就是，协同程序不会在创建它时自动执行其内容，我们可以通过函数status来检查协同程序的状态。
local co = coroutine.create(function () print("Hello WOrld") end)
print(coroutine.status(co))     -- suspended

函数coroutine.resume用于启动或再次启动一个协同程序的执行，并将其状态由挂起改为运行：
local co = coroutine.create(function () print("Hello WOrld") end)
print(coroutine.status(co))     -- suspended
coroutine.resume(co)          -- Hello World
上面的代码中，我调用了resume函数，将协同程序co由suspended改为running状态，当打印了Hello World之后，协同程序co就处于死亡状态。



协同程序的真正强大之处在于函数yield的使用上，该函数可以让一个运行中的协同程序挂起，而之后可以再恢复它的运行:
local co = coroutine.create(function ()
     for i = 1, 10 do
          print("co", i)
          coroutine.yield() --挂起
     end
end)

-- 打印初始状态
print(coroutine.status(co))     -- suspended

-- 唤醒协同程序co
coroutine.resume(co)     -- 打印co 1

-- 打印协同程序的状态
print(coroutine.status(co))     -- suspended

-- 再次唤醒协同程序co
coroutine.resume(co)     -- 打印co 2

-- 打印协同程序的状态
print(coroutine.status(co))     -- suspended

coroutine.resume(co)     -- 打印co 3
coroutine.resume(co)     -- 打印co 4
coroutine.resume(co)     -- 打印co 5
coroutine.resume(co)     -- 打印co 6
coroutine.resume(co)     -- 打印co 7
coroutine.resume(co)     -- 打印co 8
coroutine.resume(co)     -- 打印co 9
coroutine.resume(co)     -- 打印co 10
coroutine.resume(co)     -- 什么都不打印
print(coroutine.status(co))     -- dead
coroutine.resume(co)
当在协同程序的执行中发生任何错误，Lua是不会显示错误消息的，而是将执行权返回给resume调用。当coroutine.resume的第一个返回值为false时，就表明协同程序在运行过程中发生了错误；当值为true时，则表明协同程序运行正常


-----------------------------------------------
local co = coroutine.create(function (a,b)
     for i = 1, 10 do
          print(a+b)
          coroutine.yield() --挂起
     end
end)
coroutine.resume(co,1,2)  --3 只有第一次传进来的值有效
coroutine.resume(co,2,3)  --3
