lua元表与元方法

在C++中，两个类是无法直接相加的，如果你重载了“+”符号，就可以进行类的加法运算。
在Lua中也有这个道理，两个table类型的变量，你是无法直接进行“+”操作的，如果你定义了一个指定的函数，就可以进行了



Lua在创建新的table时不会创建元表：
local t = {1, 2}
print(getmetatable(t))     -- nil

任何table都可以作为任何值的元表，而一组相关的table可以共享一个通用的元表，此元表描述了它们共同的行为
一个table甚至可以作为它自己的元表

只能设置table的元表。若要设置其它类型的值得元表，则必须通过C代码来完成。
还存在一个特例，对于字符串，标准的字符串程序库为所有的字符串都设置了一个元表，而其它类型在默认情况下都没有元表
print(getmetatable("Hello World"))   --table:XXXXXX
print(getmetatable(10))   --nil

在table中，可以重新定义的元方法有以下几个：#####
__add(a, b) --加法
__sub(a, b) --减法
__mul(a, b) --乘法
__div(a, b) --除法
__mod(a, b) --取模
__pow(a, b) --乘幂
__unm(a) --相反数
__concat(a, b) --连接
__len(a) --长度
__eq(a, b) --相等
__lt(a, b) --小于
__le(a, b) --小于等于
__index(a, b) --索引查询
__newindex(a, b, c) --索引更新（PS：不懂的话，后面会有讲）
__call(a, ...) --执行方法调用
__tostring(a) --字符串输出
__metatable --保护元表

----------------------------------------------------算术类的元方法:
Set = {}
local mt = {} -- 集合的元表

-- 根据参数列表中的值创建一个新的集合
function Set.new(l)    
    local set = {}
    setmetatable(set, mt)  --#####
    for _, v in pairs(l) do set[v] = true end
    mt.__metatable = "You cannot get the metatable"   --用于保护元表，该字段是__metatable，getmetatable就会返回这个字段的值，而setmetatable则会引发一个错误
    return set
end

-- 并集操作
function Set.union(a, b)
    if getmetatable(a) ~= mt or getmetatable(b) ~= mt then
          error("metatable error.")
    end


    local retSet = Set.new{} -- 此处相当于Set.new({})
    for v in pairs(a) do retSet[v] = true end
    for v in pairs(b) do retSet[v] = true end
    return retSet
end

-- 打印集合的操作
function Set.toString(set)
     local tb = {}
     for e in pairs(set) do
          tb[#tb + 1] = e
     end
     return "{" .. table.concat(tb, ", ") .. "}"
end


mt.__add = Set.union  --##############
mt.__tostring = Set.toString

eg:将两个表的内容合并到一个表
local set1 = Set.new({10, 20, 30})
local set2 = Set.new({1, 2})
//set1和set2的元表相同
print(getmetatable(set1))
print(getmetatable(set2))

local set3 = set1 + set2  --自动的调用Set.union函数，并将两个操作数作为参数传入
