------------------------------------------------------------------节点事件:

节点事件在一个 Node 对象进入、退出场景时触发。
local node = display.newNode()
node:addNodeEventListener(cc.NODE_EVENT, function(event)
    print(event.name)
end)
scene:addChild(node)

event.name: 指示节点事件类型，具有下列值：
enter: Node 加入了正在运行的场景
exit: Node 退出了正在运行的场景
enterTransitionFinish: 进入一个新场景时的特效结束
exitTransitionStart: 退出一个现有场景时的特效开始
cleanup: Node 被完全清理并从内存删除时


eg:
require("framework.init")

-- 首先创建一个空白场景
local sceneInit = display.newScene("sceneInit")
-- 进入该场景
display.replaceScene(sceneInit)

local function createTestScene(name)
    local scene = display.newScene(name)
    local node = display.newNode()
    node:addNodeEventListener(cc.NODE_EVENT, function(event)
        printf("node in scene [%s] NODE_EVENT: %s",
               name, event.name)
    end)
    scene:addChild(node)
    return scene
end

-- 等待 1.0 秒创建第一个测试场景
sceneInit:performWithDelay(function()
    local scene1 = createTestScene("scene1")
    display.replaceScene(scene1)

    -- 等待 1.0 秒创建第二个测试场景
    scene1:performWithDelay(function()
        print("--------")
        local scene2 = createTestScene("scene2")
        display.replaceScene(scene2)
    end, 1.0)
end, 1.0)
输出结果：

node in scene [scene1] NODE_EVENT: enter
node in scene [scene1] NODE_EVENT: enterTransitionFinish
--------
node in scene [scene1] NODE_EVENT: exitTransitionStart
node in scene [scene1] NODE_EVENT: exit
node in scene [scene1] NODE_EVENT: cleanup
node in scene [scene2] NODE_EVENT: enter
node in scene [scene2] NODE_EVENT: enterTransitionFinish
在切换场景时如果没有使用特效，那么事件出现的顺序如上
但如果将测试代码 display.replaceScene(scene2) 修改为 display.replaceScene(scene2, "random", 1.0)，事件出现顺序会变成：
node in scene [scene1] NODE_EVENT: enter
node in scene [scene1] NODE_EVENT: enterTransitionFinish
--------
node in scene [scene1] NODE_EVENT: exitTransitionStart
node in scene [scene2] NODE_EVENT: enter
node in scene [scene1] NODE_EVENT: exit
node in scene [scene2] NODE_EVENT: enterTransitionFinish
node in scene [scene1] NODE_EVENT: cleanup

------------------------------------------------------------------节点帧事件:
require("framework.init")

local scene = display.newScene()

-- 注册事件
scene:addNodeEventListener(cc.NODE_ENTER_FRAME_EVENT, function(dt)
    print(dt)
end)
-- 启用帧事件
scene:scheduleUpdate()

-- 0.5 秒后，停止帧事件
scene:performWithDelay(function()
    -- 禁用帧事件
    scene:unscheduleUpdate()
    print("STOP")

    -- 再等 0.5 秒，重新启用帧事件
    scene:performWithDelay(function()
        -- 再次启用帧事件
        scene:scheduleUpdate()
    end, 0.5)
end, 0.5)

display.replaceScene(scene)
注意：一定要调用 scheduleUpdate() 后，帧事件才会触发



------------------------------------------------------------------键盘事件：
键盘事件当前仅在 Android 设备上有效，可以得到用户按下 Menu 和 Back 键时的消息：

local node = display.newNode()
node:addNodeEventListener(cc.KEYPAD_EVENT, function(event)
    print(event.name)
end)
scene:addChild(node)
~

event 属性：

event.name: 指示用户按下的键，具有下列值：
menu
back


------------------------------------------------------------------重力感应事件：
local node = display.newNode()
node:addNodeEventListener(cc.ACCELERATE_EVENT, function(event)
    print(event.x, event.y, event.z, event.timestamp)
end)
scene:addChild(node)


event 属性：

event.x, event.y, event.z: 设备在 xyz 轴上的角度
event.timestamp: 测量值更新时间


------------------------------------------------------------------应用程序事件：
quick 应用中，存在一个全局的 app 对象。

该对象会提供一些应用程序级别的事件：

APP_ENTER_BACKGROUND_EVENT: 应用进入后台
APP_ENTER_FOREGROUND_EVENT: 应用从后台恢复运行
app:addEventListener("APP_ENTER_BACKGROUND_EVENT", function(event)
    ...
end)

app:addEventListener("APP_ENTER_FOREGROUND_EVENT", function(event)
    ...
end)