app.lua
version = 2.1
name = "ndl"
people = {name = "cc", age = 18}
function main()
	print("Hello")
end

function getString(name)
	return "Hello"..name
end


==========================

//C执行lua文件
lua_State *L = luaL_newstate();
luaL_openlibs(L);//加载lua库
dofile(L,"app.lua");//###
lua_close(L);



//C执行lua代码
lua_State *L = luaL_newstate();
luaL_openlibs(L);//加载lua库
dostring(L, "print(\"Hello"\)","ScriptName");
lua_close(L);


//获取Lua的全局变量
lua_State *L = luaL_newstate();
luaL_openlibs(L);//加载lua库
dofile(L,"app.lua");
lua_getglobal(L,"name");//"name"全局变量的名字  并将它压入了栈里
if (lua_isstring(L,1)) {
	printf("%s\n",lua_tostring(L,1));//1是栈里的索引
}
lua_pop(L,1);//清空栈
lua_close(L);


//获取Lua全局对象属性
ua_State *L = luaL_newstate();
luaL_openlibs(L);//加载lua库
dofile(L,"app.lua");
lua_getglobal(L,"people");//people对象被压入栈  
lua_getfield(L,1,"name");//people对象的name属性被压入栈
if(lua_isstring(L,-1)){
	printf("%s\n",lua_tostring(L,-1));
}
lua_pop(L,2);
lua_close(L);


//C调用Lua的方法
//无参
lua_State *L = luaL_newstate();
luaL_openlibs(L);
dofile(L,"app.lua");
lua_getglobal(L,"main");
lua_call(L,0,0);//0个参数 0个返回值  方法调用不需要清空栈,它会清空栈
lua_close(L);


//有参
lua_State *L = luaL_newstate();
luaL_openlibs(L);
dofile(L,"app.lua");
lua_getglobal(L,"getString");
lua_pushstring(L,"ndl");//传参 压入栈
lua_call(L,1,1);//清空栈 栈中只有一个返回值
if (lua_isstring(L,-1)) {
	printf("%s\n",lua_tostring(L,-1));
}
lua_pop(L,1);
lua_close(L);


----------------------------
// 加载配置文件
int bRet = luaL_loadfile(L, pConfigFile);--加载一个lua文件
// 运行配置文件
bRet = lua_pcall(L, 0, 0, 0);--lua_pcall是在保护模式下运行Lua代码



-----------------------------
// 将需要设置的值设置到栈中
lua_pushstring(L, "jdj");--将一个需要设置的新值放到栈中
// 将这个值设置到table中
lua_setfield(L, -2, "name");--将lua_push*到栈中的值，设置到table对应的key中

--在表中完全创建一个新的table
// 创建一个新的table，并压入栈
lua_newtable(L);
// 往table中设置值
lua_pushstring(L, "www.baidu.com"); // 先将值压入栈
lua_setfield(L, -2, "website"); // 将值设置到table中
// 再设置一个值
lua_pushstring(L, "Hello World");
lua_setfield(L, -2, "description");
