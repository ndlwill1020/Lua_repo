UTF-8不是固定字长编码的，而是一种变长的编码方式。
它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度

GB2312这些汉字编码，典型的用2个字节来表示绝大部分的常用汉字

在文件编码格式为UTF-8时，一个中文是3个字节
string.len("确定")  --6

中文汉字在utf-8中到底占几个字节，一般是3个字节，最常见的编码方式是1110xxxx 10xxxxxx 10xxxxxx
这个字符是否为中文是可以判断的，因为如果是汉字，那么这个字符的第一个字节的高三位（即1110xxxx中的111）一定是111，
第四位是0，所以这个字节换算成数字的话最小值是224（11100000）最大值是239（11101111），
所以如果我们读到一个字节，他的数值介于224与238之间，那么我们就可以判定，
这个字节以及其后的两个字节，共三个字节组成一个汉字

--计算字符串宽度
--string.byte("ad",1,2)  --97  100

function strWidth(inputStr)
	local totalByte = #inputStr
	local width = 0
	local index = 1
	while(index <= totalByte) do
		--计算字符串在index的编码
		local curByte = string.byte(inputStr, index)
		local offset = 1;
		if curByte > 0 and curByte <= 127 then
            offset = 1                                            --1字节字符  0x00—0x7F(0-127)  0XXX XXXX
        elseif curByte >= 192 and curByte <= 223 then
            offset = 2                                            --双字节字符 (110X XXXX 第一个字节192-223 ,10XX XXXX第二个字节）
        elseif curByte >= 224 and curByte <＝ 239 then
            offset = 3                                            --汉字 （1110 XXXX 224-239,10XX XXXX,10XX XXXX）
        elseif curByte >= 240 and curByte <= 247 then
            offset = 4                                            --4字节字符 (1111 0XXX 240-247, 10XX XXXX, 10XX XXXX, 10XX XXXX)
        end
		
		local char = string.sub(inputStr, index, index + offset - 1)
		print(char)  --看看这个是什么
		index = index + offset -- 重置下一字节的索引
		width = width + 1
	end
	return width
end