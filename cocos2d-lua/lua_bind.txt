http://www.cocos2d-x.org/wiki/Lua
http://www.cocos.com/doc/article/index?type=wiki&url=/doc/cocos-docs-master/manual/framework/native/wiki/how-to-use-bindings-generator/zh.md
http://www.zaojiahua.com/binding-custom-classes.html

http://my.oschina.net/skyhacker2/blog/298397   //还没看
https://segmentfault.com/a/1190000000718145
http://shahdza.blog.51cto.com/2410787/1569003

How to use bindings-generator to generate lua binding automatically

Mac:
cocos2dx3.2  NDK r9b 必须

1.创建自定义类 frameworks->cocos2d-x->cocos->my路径下
2.在frameworks->cocos2d-x->cocos/tools/tolua文件夹里面创建一个cocos2dx_custom.ini文件  .ini文件复制同路径下的其他.ini以免照成不同版本不同.ini
修改：
第一行的名字
prefix = cocos2dx_CustomClass    和.ini文件名一样
headers = %(cocosdir)s/cocos/路径名/新建类名.h

/*
[title]：要配置将被使用的工具/ tolua的/ gengindings.py脚本的称号。一般来说，标题可以是文件名。

prefix：要配置一个函数名的前缀，通常，我们还可以使用文件名作为前缀。

target_namespace：要配置在脚本层模块的名字。在这里，我们使用cc作为模块名，当你想在脚本层REF的名称，您必须将一个名为前缀，CC在名称的前面。例如，CustomClass可以参考作为cc.CustomClass。

headers：要配置所有需要解析的头文件和％（cocosdir）s是的Cocos2d-x的引擎的根路径。

classes：要配置所有绑定所需的类。在这里，它支持正则表达式。因此，我们可以设置MyCustomClass。*在这里，用于查找多个特定的用法，你可以对照到tools/tolua/cocos2dx.ini。

skip：要配置需要被忽略的功能。现在绑定发电机无法解析的void *类型，并委托类型，所以这些类型的需要进行手动绑定。而在这种情况下，你应该忽略所有这些类型，然后再手动将它们绑定。你可以对照到配置文件路径下的cocos/scripting/lua-bindings/auto 。
rename_functions：要配置的功能需要在脚本层进行重命名。由于某些原因，开发者希望更多的脚本友好的API，所以配置选项就是为了这个目的。

rename_classes：不在使用。

remove_prefix：不在使用。

classes_have_no_parents：要配置是过滤器所需要的父类。这个选项是很少修改。

abstract_classes：要配置的公共构造并不需要导出的类。

script_control_cpp：是的。要配置脚本层是否管理对象的生命周期。如果没有，那么C++层关心他们的生命周期。 现在，它是不完善的，以控制原生对象的续航时间在脚本层。所以，你可以简单地把它设置为no。
*/
3.配置frameworks->cocos2d-x->cocos/tools/tolua/genbindings.py
cmd_args = 添加自己的

报错ImportError: No module named yaml
sudo easy_install pip
sudo pip install pyyaml
ImportError: No module named Cheetah
sudo pip install Cheetah

报错 头文件错误：修改cocos2dx_custom.ini 的cocos_headers：去配置  eg：mac下面  -I%(cocosdir)s/cocos/platform/ios
//////////////////
4.在运行 tools/tolua/genbindings.py 后, 这里会有两个文件在 cocos/scripting/lua-bindings/auto 目录下

调用绑定函数:
3.2
打开 lua_cocos2dx_custom_auto.h 然后你会发现一个全局函数声明:
register_all_cocos2dx_CustomClass(engine->getLuaStack()->getLuaState());
如果要调用这个函数要在正确的地方（通常是我们在AppDelegate.cpp文件中调用这个功能）。调用此方法后，您将能够使用所有导出的Lua函数。还有一件事，当你调用register方法​​，你应该确定，Lua的栈顶元素是_G。

报错的话 
1.Build Phases->compile Sources
2.search paths->$(SRCROOT)/../../cocos2d-x/cocos/my

3.x的某版本开始(???)
在Classes目录下有lua_module_register.h
#include bingding生成的.hpp
在方法里调用
lua_getglobal(L,"_G");
if(lua_istable(L,-1)){
	register_all_cocos2dx_XXX(L);
}
lua_pop(L,1)

3.2   在Classes目录下没有lua_module_register.h＃＃＃＃＃＃＃＃＃＃＃＃
bool AppDelegate::applicationDidFinishLaunching()
{
    //
    auto engine = LuaEngine::getInstance();
    
    //register_all_cocos2dx_CustomClass(engine->getLuaStack()->getLuaState());
    lua_getglobal(engine->getLuaStack()->getLuaState(), "_G");
    if (lua_istable(engine->getLuaStack()->getLuaState(), -1)) {
        register_all_cocos2dx_CustomClass(engine->getLuaStack()->getLuaState());
    }
    lua_pop(engine->getLuaStack()->getLuaState(), 1);
    
    ScriptEngineManager::getInstance()->setScriptEngine(engine);
    
//    engine->executeScriptFile("DeprecatedEnum.lua");
//    engine->executeScriptFile("DeprecatedClass.lua");
//    engine->executeScriptFile("Deprecated.lua");
    
    if (engine->executeScriptFile("src/main.lua")) {
        return false;
    }

    return true;
}


eg:
lua_getglobal(engine->getLuaStack()->getLuaState(), "_G");
    if (lua_istable(engine->getLuaStack()->getLuaState(), -1)) {
        register_all_cocos2dx_CustomClass(engine->getLuaStack()->getLuaState());
    }
    lua_pop(engine->getLuaStack()->getLuaState(), 1);


local test = cc.CustomClass:create()
    test:sayHello()



http://shahdza.blog.51cto.com/2410787/1566513   lua学习
