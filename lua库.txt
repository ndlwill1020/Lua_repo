next(table,index)
可以用next(t)来检测表是否为空。
此函数只能用于数字做键的表（即纯数组）
eg：
a = {4, 7, 9}
print(next(a,1))
返回：键2和值7

rawset(表,键,值)
更改表中制定键值对应的值
t = {1, 2, 3}
rawset(t, 2, 4)
t表变成 {1, 4, 3}

rawget(表,键)
获取表中制定键对应的值
t = {4, 7, 9}
rawget(t, 2)
返回 7

select (index, ...)
第一个参数为数字时，从第index个参数开始取值到最后。
若为 "#" ，则返回参数的总个数（不包含index）
select("#","a","b","c")    -- 输出 3
select("1","a","b","c")    -- 输出 a b c
select("2","a","b","c")    -- 输出 b c
select("3","a","b","c")    -- 输出 c

rawequal(num1,num2)
判断两个参数是否相等
rawequal(1,2)-- false
rawequal(2,2)-- true
--------------------------------数学库:
math.pi
三角函数:
所有的三角函数都使用弧度单位，可以用函数deg（角度）和rad（弧度）来转换角度和弧度
--三角函数的参数都是弧度
print(math.sin(math.rad(30))) -- 0.5

math.deg(math.pi) = 180

取整函数（floor,ceil）:
floor：返回不大于x的最大整数；向下取整；
ceil：返回不小于x的最大整数；向上取整。

print(math.floor(5.6)) -- 5
print(math.ceil(5.6)) -- 6


最大值和最小值（max,min）:
max：取参数中的最大值；
min：取参数中的最小值。

print(math.max(2, 3, 2, 14, 2, 30, -3)) -- 30
print(math.min(2, 3, 2, 14, 2, 30, -3)) -- -3

math.sqrt(16) = 4
math.pow(2,5) = 2^5 = 32
math.atan2(y,x)  算出弧度


生成伪随机数的函数（random,randomseed）

（1）如果在调用时不提供任何参数，它将返回一个在区间[0, 1)内均匀分布的伪随机实数；
（2）如果提供了一个整数n作为参数，它将返回一个在区间[1, n]内的伪随机整数；
（3）如果提供了两个整数参数m和n，它将返回一个在区间[m, n]内的伪随机整数。

math.randomseed(os.time()) --设置伪随机数生成器的种子数
print(math.random()) -- 输出一个大于等于0，小于1的值
print(math.random(2)) -- 输出1-2之间   输出不是1就是2
print(math.random(3, 4)) -- 输出不是3就是4

--------------------------------table库:
这些函数将table作为数组来操作####################
插入和删除函数:
table.insert用于将一个元素插入到一个数组的指定位置，它会移动后续元素以空出空间。
如果在调用table.insert时没有指定位置参数，则会将元素添加到数组末尾。
local tb = {10, 20, 30}
table.insert(tb, 40) -- 在table的最后插入，结果为：{10, 20, 30, 40}
table.insert(tb, 2, 15) -- 在table的位置2插入，结果为：{10, 15, 20, 30, 40}

local removeValue = table.remove(tb)  --删除最后个元素  removeValue 等于删除的值
table.remove(tb,2) --删除第二个元素

====================排序:
它可以对一个数组进行排序，还可以指定一个可选的次序函数。这个次序函数有两个参数，
如果没有提供这个函数，table.sort就使用默认的小于操作。实例代码：
local tb = {20, 10, 2, 3, 4, 89, 20, 33, 2, 3}

-- 默认是升序排序
table.sort(tb)
for _, v in ipairs(tb) do
	print(v)
end


-- 修改为降序排序
table.sort(tb, function (a, b) if a > b then return true end end)
for _, v in ipairs(tb) do
	print(v)
end

====================对一个table的索引进行排序:
在table中，索引是一个无序的集合。如果对它们进行排序，则必须将它们复制到一个数组中，然后对这个数组进行排序###############
local tb = {x = 20, z = 10, y = 30, m = 2, n = 8} -- 这是一个key无序的table

local keyTb = {}
for k, _ in pairs(tb) do
	keyTb[#keyTb + 1] = k
end

table.sort(keyTb)

for _, v in ipairs(keyTb) do
	print(v .. " = " .. tb[v])
end


连接:
它接受一个字符串数组，并返回这些字符串连接后的结果，它有一个可选参数，用于指定插到字符串之间的分隔符，同时这个函数另外还接受两个可选参数，用于指定第一个和最后一个要连接的字符串索引。示例代码：
local tb = {"Jelly", "Think", "Is", "Good"}
local strTb = table.concat(tb, " ")
print(strTb)

--------------------------------字符串库:
local str = "Jelly Think"

-- string.len可以获得字符串的长度
local len = string.len(str)
print(len) -- 11

-- string.rep返回字符串重复n次的结果
str = "ab"
local newStr = string.rep(str, 2) -- 重复两次
print(newStr) -- abab

-- string.lower将字符串大写变成小写形式，并返回一个改变以后的副本
str = "Jelly Think"
newStr = string.lower(str)
print(newStr) -- jelly think

-- string.upper将字符串小写变成大写形式，并返回一个改变以后的副本
newStr = string.upper(str)
print(newStr) -- JELLY THINK


string.sub(s, i, j)函数，它可以从字符串s中提取第i个到第j个字符。在Lua中，字符串的第一个字符的索引是1，但是，索引也可以是负数，表示从字符串的尾部开始计数，索引-1代表字符串的最后一个字符，以此类推。
local str = "[Jelly Think]"
local newStr = string.sub(str, 2, -2)
print(newStr) -- Jelly Think
newStr = string.sub(str, 2, 6)
print(newStr) -- Jelly
在Lua中，字符串和其它语言的一样，是不可变的，以上的操作，都会返回一个新的值，但并不会修改原来的字符串#######



string.char函数接受零个或多个整数，并将每个整数转换成对应的字符，然后返回一个由这些字符连接而成的字符串。string.byte(s, i)返回字符串s中第i个字符的内部数值表示，它的第二个参数是可选的，调用string.byte(s)可返回字符串s中第一个字符的内部数值表示。
print(string.char(97)) -- a

local i = 98
print(string.char(i, i + 1, i + 2)) -- bcd

print(string.byte("abc")) -- 97
print(string.byte("abc", 2)) -- 98
print(string.byte("abc", 2, 3)) -- 98 99
print(string.byte("abc", -1)) -- 99


########################
find：查找
它只会匹配与自己完全相同的拷贝。当find找到一个模式后，它会返回两个值：匹配到的起始索引和结尾索引；如果没有找到任何匹配，它就返回nil
local str = "Hello World"
local i, j = string.find(str, "Hello") -- 返回Hello在str中的起始位置和终止位置
print(i, j)
还具有一个可选的第三个参数，它是一个索引，告诉函数应该从目标字符串的哪个位置开始搜索
对于第二个参数，我们完全可以传递一个正则表达式，也就是一个pattern，进行正则匹配。
local str = "Hello12345World"
local i, j = string.find(str, "%d+")
print(i, j) -- 6   10

match：
string.match返回的是目标字符串中与模式相匹配的那部分子串，并不是该模式所在的位置
local str = "Hello12345World"
local subStr = string.match(str, "%d+")
print(subStr)  --12345

local i, j =string.find(str, "%d+")
subStr =string.sub(str, i, j)
print(subStr)  --12345

gsub:替换
string.gsub有3个参数：目标字符串、模式和替换字符串。它的基本用法是将目标字符串中所有出现模式的地方替换为目标字符串。
local str = "Hello World"
local strResult = string.gsub(str, "Hello", "Jelly")
print(strResult) -- Jelly World


local str = "Hello World"
-- 这里不限制替换次数
local strResult, cnt = string.gsub(str, "l", "o")
print(strResult) -- Heooo Worod
print(cnt) -- 实际替换的次数

-- 开始限制替换次数  第四个参数，可以限制替换的次数
strResult, cnt = string.gsub(str, "l", "o", 1)
print(strResult) -- Heolo World
print(cnt) -- 就替换了一次


local replaceTb = {hello = "Jelly", world = "Think"}
local str = "hello world"
-- 注意，第3个参数是一个table
local strResult = string.gsub(str, "hello", replaceTb)
print(strResult) -- Jelly world

strResult = string.gsub(strResult, "world", replaceTb)
print(strResult) -- Jelly Think

strResult = string.gsub(strResult, "hello", replaceTb)
print(strResult) -- Jelly Think

可以看到，gsub的第三个参数是一个table，也就是说，当gsub的第三个参数是一个table时，如果在查找的字符串中有与第二个参数相匹配的内容，就会将该内容作为key，在table中查找该key对应的value；如果该table中没有这个key，则不进行替换


local replaceFunc = function (str)
	return str .. "JellyThink"
end
local str = "hello world"
-- 注意，第3个参数是一个Func
local strResult = string.gsub(str, "hello", replaceFunc)
print(strResult) -- helloJellyThink world
没有看错，gsub的第三个参数还可以是一个函数，该函数的参数是被匹配的字符串，该函数的返回值将会作为目标字符串去进行替换匹配的内容


gmatch：会返回一个迭代器函数
迭代器就是一种可以遍历一种集合中所有元素的机制，将迭代器表示为函数
local str = "Hello World"
local iteratorFunc = string.gmatch(str, "%a+") -- %a+表示匹配所有单词

for i in iteratorFunc do
	print(i) 
end

输出：
Hello
World
----------------------------------------------------------------I/O库:
==================简单I/O模型 :
“*all” 读取整个文件 
“*line” 读取下一行 
“*number” 读取一个数字 
<num> 读取一个不超过<num>个字符的字符串 


.txt文件存在项目目录下
io.input("input.txt") -- 从input.txt文件中读取
io.output("output.txt") -- 写入到output.txt文件

io.write("JellyThink", "\n")
io.write("果冻想", "\n")
io.write("http://www.JellyThink.com", "\n")
io.write(88)

str = io.read("*all") 
print(str)


==================


每次读取一行：
-- 用来判断是否已经读到了文件末尾
-- 如果已经到了末尾，就返回nil;否则返回空字符串
local mark = io.read(0)

while mark do
	print(io.read("*line"))
	mark = io.read(0)
	if not mark then
		print("File end.")
		break
	end
end


=================完整I/O模型：
它是基于文件句柄的，就好比与C语言中的FILE*，表示一个正在操作的文件
要打开一个文件，可以使用io.open函数，它有两个参数，一个表示要打开的文件名，另一个表示操作的模式字符串。模式字符串可以有以下四种取值方式：
（1）”r”：以读取方式打开文件；只能对文件进行读取操作；
（2）”w”：以写入方式打开文件；可以对文件进行写入操作，但是会覆盖文件原有内容；
（3）”a”：以追加方式打开文件；可以对文件进行写入操作；会在原来文件的基础在，进行追加写入；
（4）”b”：表示打开二进制文件，这种模式一般都是和前面三种混合使用，比如：”rb”,”wb”。


open函数会返回表示文件的一个句柄；如果发生错误，就返回nil，一条错误消息和一个错误代码。示例代码：
-- 访问一个不存在的文件
print(io.open("ooxx.txt", r))

输出以下内容:
nil	ooxx.txt: No such file or directory	2


当成功打开一个文件以后，就可以使用read/write方法读写文件了，这与read/write函数相似，但是需要用冒号语法
local hFile = io.open("input.txt", r)
if hFile then
	local strContent = hFile:read("*all")
	--local strContent = hFile.read(hFile, "*all") 你也可以使用这种方法
	print(strContent)
end

我们也可以将完整I/O模式与简单I/O模式混合使用。通过不指定参数调用io.input()，可以得到当前输入文件的句柄；而通过io.input(handle)，可以设置当前输入文件的句柄，比如，需要临时改变当前输入文件，可以这样做：
-- io.input()不传入参数时，获取当前的输入文件句柄
local hCurrent = io.input()

-- 打开一个新的文件
io.input("input.txt")

-- 在新的文件上进行操作
local strContent = io.read("*all")
print(strContent)

-- 关闭当前文件
io.input():close()

-- 操作完成以后，恢复到以前的状态
io.input(hCurrent)



=================其它文件操作：
函数tmpfile返回一个临时文件的句柄，这个句柄是以读/写方式打开；这个文件会在程序结束时自动删除。我们在使用时，可以直接io.tmpfile()

函数flush会将缓冲区中数据写入文件，它与write函数一样，将其作为一个函数调用时，io.flush()会刷新当前输出文件；而将其作为一个方法调用时，f:flush()会刷新某个特定的文件f。

函数seek可以获取和设置一个文件的当前位置。它的一般形式是f:seek(whence, offset)，其参数的具体含义如下：
（1）whence取值set，offset表示为相对于文件起始的偏移量；
（2）whence取值cur，offset表示为相对于当前位置的偏移量；
（3）whence取值end，offset表示为相对于文件末尾的偏移量。
函数seek它总是返回文件的当前位置，即相对于文件起始处的偏移字节数。
function GetFileSize(hFile)
	local currentPos = hFile:seek() -- 获取当前位置
	local size = file:seek("end") -- 获取文件大小
	file:seek("set", currentPos)
	return size
end

--------------------------------------------------------------
用于文件改名的os.rename函数
用于删除文件的os.remove函数

----------------------------------------------------------------日期与时间：
time:
如果不带任何参数调用time函数，它会以数字形式返回当前的日期和时间。返回的数值表示当前时间到某个特定时间的秒数，在不同的系统上，这个特定的时间是不一样的。如果用一个table作为参数调用它，它会返回一个数字，表示该table中所描述的日期和时间。这种table具有以下有效字段：

year 一个完整的年份 
month 01-12 
day 01-31 
hour 00-23 
min 00-59 
sec 00-59 
isdst 一个布尔值，true表示夏令时 

print(os.time()) -- 输出当前时间的描述
print(os.time({year=2014,month=8,day=14}))

dtae：#####
函数date是time的一个反函数，它可以将一个表示日期和时间的数字转换成某些高级的表现形式。其第一个参数是格式字符串，指定了期望的表示形式；第二个参数是日期和时间的数字，默认为当前日期和时间
local tbCurrentTime = os.date("*t")

for k, v in pairs(tbCurrentTime) do
    print(k .. "=" .. tostring(v))
end

输出：
hour=16
min=55
wday=6
day=8
month=7
year=2016
sec=16
yday=190
isdst=false


os.date()  --07/08/16 17:20:25